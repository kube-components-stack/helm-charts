argocd-notifications:
  name: notifications
  argocdUrl: ""

  secret:
    create: false
    name: argocd-notifications-secret

  # Additional container environment variables
  extraEnv:
    - name: TZ
      value: Europe/Paris
  logLevel: debug # info # warning # debug
  notifiers:
    service.slack: |
      devops-slack: $devops-slack
    service.teams: |
      recipientUrls:
        devops-teams: $devops-teams
    service.grafana: |
      apiUrl: http://kube-prometheus-stack-grafana.monitoring.svc/api
      apiKey: $grafana-api-key-argocd-notifications
  subscriptions:
    - recipients:
        - teams:devops-teams
        - slack:devops-slack
        - grafana:argocd
      triggers:
        - on-created
        - on-deleted
        - on-deployed
        - on-health-degraded
        - on-sync-failed
        - on-sync-running
        - on-sync-status-unknown
        - on-sync-succeeded
  # https://github.com/argoproj-labs/argocd-notifications/tree/master/catalog/templates
  templates:
    # https://pkg.go.dev/time#Now
    # https://yourbasic.org/golang/format-parse-string-time-date-example/
    # https://medium.com/easyread/understanding-about-rfc-3339-for-datetime-formatting-in-software-engineering-940aa5d5f68a
    # For more information: https://argocd-notifications.readthedocs.io/en/stable/templates/
    template.app-created: |
      email:
        subject: Application {{.app.metadata.name}} has been created.
      message: Application {{.app.metadata.name}} has been created.
      teams:
        title: Application {{.app.metadata.name}} has been created.
    template.app-deleted: |
      email:
        subject: Application {{.app.metadata.name}} has been deleted.
      message: Application {{.app.metadata.name}} has been deleted.
      teams:
        title: Application {{.app.metadata.name}} has been deleted.
    template.app-deployed: |
      email:
        subject: New version of an application {{.app.metadata.name}} is up and running.
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
      teams:
        themeColor: "#000080"
        facts: |
          [
            {
              "name": "Sync Status",
              "value": "{{.app.status.sync.status}}"
            },
            {
              "name": "Repository",
              "value": "{{.app.spec.source.repoURL}}"
            },
            {
              "name": "Revision",
              "value": "{{.app.status.sync.revision}}"
            },
            {
              "name": "Message",
              "value": "{{(call .repo.GetCommitMetadata .app.status.sync.revision).Message}}"
            },
            {
              "name": "Author",
              "value": "{{(call .repo.GetCommitMetadata .app.status.sync.revision).Author}}"
            }
            {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "name": "{{$c.type}}",
                "value": "{{$c.message}}"
              }
            {{end}}
          ]
        potentialAction: |-
          [
            {
              "@type":"OpenUri",
              "name":"Open Repository",
              "targets":[{
                "os":"default",
                "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
              }]
            },
            {
              "@type":"OpenUri",
              "name":"Operation Application",
              "targets":[{
                "os":"default",
                "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}"
              }]
            }
          ]
        title: New version of an application {{.app.metadata.name}} is up and running.
    template.app-health-degraded: |
      themeColor: "#FF0000"
      email:
        subject: Application {{.app.metadata.name}} has degraded.
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
        Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
      teams:
        facts: |
          [
            {
              "name": "Sync Status",
              "value": "{{.app.status.sync.status}}"
            },
            {
              "name": "Repository",
              "value": "{{.app.spec.source.repoURL}}"
            },
            {
              "name": "Message",
              "value": "{{(call .repo.GetCommitMetadata .app.status.sync.revision).Message}}"
            },
            {
              "name": "Author",
              "value": "{{(call .repo.GetCommitMetadata .app.status.sync.revision).Author}}"
            }
            {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "name": "{{$c.type}}",
                "value": "{{$c.message}}"
              }
            {{end}}
          ]
        potentialAction: |
          [
            {
              "@type":"OpenUri",
              "name":"Open Repository",
              "targets":[{
                "os":"default",
                "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
              }]
            },
            {
              "@type":"OpenUri",
              "name":"Open Application",
              "targets":[{
                "os":"default",
                "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}"
              }]
            }
          ]
        title: Application {{.app.metadata.name}} has degraded.
    template.app-sync-failed: |
      email:
        subject: Failed to sync application {{.app.metadata.name}}.
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{(call .time.Parse .app.status.operationState.finishedAt).Local.Format "02/01/2006 15:04:05 +0200"}} with the following error: {{.app.status.operationState.message}}
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      teams:
        themeColor: "#FF0000"
        facts: |
          [
            {
              "name": "Sync Status",
              "value": "{{.app.status.sync.status}}"
            },
            {
              "name": "Failed at",
              "value": "{{(call .time.Parse .app.status.operationState.finishedAt).Local.Format "02/01/2006 15:04:05"}}"
            },
            {
              "name": "Repository",
              "value": "{{.app.spec.source.repoURL}}"
            }
            {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "name": "{{$c.type}}",
                "value": "{{$c.message}}",
              }
            {{end}}
          ]
        potentialAction: |-
          [
            {
              "@type":"OpenUri",
              "name":"Open Repository",
              "targets":[{
                "os":"default",
                "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
              }]
            },
            {
              "@type":"OpenUri",
              "name":"Open Operation",
              "targets":[{
                "os":"default",
                "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
              }]
            }
          ]
        title: Failed to sync application {{.app.metadata.name}}.
    template.app-sync-running: |
      email:
        subject: Start syncing application {{.app.metadata.name}}.
      message: |
        The sync operation of application {{.app.metadata.name}} has started at {{(call .time.Parse .app.status.operationState.startedAt).Local.Format "02/01/2006 15:04:05"}}.
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      teams:
        facts: |
          [
            {
              "name": "Sync Status",
              "value": "{{.app.status.sync.status}}"
            },
            {
              "name": "Started at",
              "value": "{{(call .time.Parse .app.status.operationState.startedAt).Local.Format "02/01/2006 15:04:05"}}"
            },
            {
              "name": "Repository",
              "value": "{{.app.spec.source.repoURL}}"
            }
            {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "name": "{{$c.type}}",
                "value": "{{$c.message}}",
              }
            {{end}}
          ]
        potentialAction: |-
          [
            {
              "@type":"OpenUri",
              "name":"Open Repository",
              "targets":[{
                "os":"default",
                "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
              }]
            },
            {
              "@type":"OpenUri",
              "name":"Open Operation",
              "targets":[{
                "os":"default",
                "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
              }]
            }
          ]
        title: Start syncing application {{.app.metadata.name}}.
    template.app-sync-status-unknown: |
      email:
        subject: Application {{.app.metadata.name}} sync status is 'Unknown'
      message: |
        {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.
        Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
        {{if ne .serviceType "slack"}}
        {{range $c := .app.status.conditions}}
            * {{$c.message}}
        {{end}}
        {{end}}
      teams:
        facts: |
          [
            {
              "name": "Sync Status",
              "value": "{{.app.status.sync.status}}"
            },
            {
              "name": "Repository",
              "value": "{{.app.spec.source.repoURL}}"
            }
            {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "name": "{{$c.type}}",
                "value": "{{$c.message}}"
              }
            {{end}}
          ]
        potentialAction: |-
          [
            {
              "@type":"OpenUri",
              "name":"Open Repository",
              "targets":[{
                "os":"default",
                "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
              }]
            },
            {
              "@type":"OpenUri",
              "name":"Open Application",
              "targets":[{
                "os":"default",
                "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}"
              }]
            }
          ]
        title: Application {{.app.metadata.name}} sync status is 'Unknown'
    template.app-sync-succeeded: |
      email:
        subject: Application {{.app.metadata.name}} has been successfully synced.
      message: |
        {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{(call .time.Parse .app.status.operationState.finishedAt).Local.Format "02/01/2006 15:04:05"}}.
        Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      teams:
        themeColor: "#000080"
        facts: |
          [
            {
              "name": "Sync Status",
              "value": "{{.app.status.sync.status}}"
            },
            {
              "name": "Synced at",
              "value": "{{(call .time.Parse .app.status.operationState.finishedAt).Local.Format "02/01/2006 15:04:05"}}"
            },
            {
              "name": "Repository",
              "value": "{{.app.spec.source.repoURL}}"
            }
            {{range $index, $c := .app.status.conditions}}
              {{if not $index}},{{end}}
              {{if $index}},{{end}}
              {
                "name": "{{$c.type}}",
                "value": "{{$c.message}}"
              }
            {{end}}
          ]
        potentialAction: |-
          [
            {
              "@type":"OpenUri",
              "name":"Open Repository",
              "targets":[{
                "os":"default",
                "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
              }]
            },
            {
              "@type":"OpenUri",
              "name":"Operation Details",
              "targets":[{
                "os":"default",
                "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
              }]
            }
          ]
        title: Application {{.app.metadata.name}} has been successfully synced
  triggers:
    # For more information: https://argocd-notifications.readthedocs.io/en/stable/triggers/
    trigger.on-created: |
      - description: Application is created.
        oncePer: app.metadata.name
        send:
        - app-created
        when: "true"
    trigger.on-deleted: |
      - description: Application is deleted.
        oncePer: app.metadata.name
        send:
        - app-deleted
        when: app.metadata.deletionTimestamp != nil
    trigger.on-deployed: |
      - description: Application is synced and healthy. Triggered once per commit.
        oncePer: app.status.operationState.syncResult.revision
        send:
        - app-deployed
        when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
    trigger.on-health-degraded: |
      - description: Application has degraded
        send:
        - app-health-degraded
        when: app.status.health.status == 'Degraded'
    trigger.on-sync-failed: |
      - description: Application syncing has failed
        send:
        - app-sync-failed
        when: app.status.operationState.phase in ['Error', 'Failed']
    trigger.on-sync-running: |
      - description: Application is being synced
        oncePer: app.status.sync.revision
        send:
        - app-sync-running
        when: app.status.operationState.phase in ['Running']
    trigger.on-sync-status-unknown: |
      - description: Application status is 'Unknown'
        send:
        - app-sync-status-unknown
        when: app.status.sync.status == 'Unknown'
    trigger.on-sync-succeeded: |
      - description: Application syncing has succeeded
        oncePer: app.status.sync.revision
        send:
        - app-sync-succeeded
        when: app.status.operationState.phase in ['Succeeded']