{{- if .Values.job.enabled -}}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: waiting-argocd-became-ready
  labels:
    {{- include "kube-components-stack.labels" . | nindent 4 }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 4
  template:
    spec:
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      containers:
      - command:
        - /bin/sh
        - -c
        - |
          /bin/bash <<'EOF'
            set -euo pipefail
            kubectl -n {{ .Release.Namespace }} rollout status deploy/argocd-repo-server
            kubectl -n {{ .Release.Namespace }} rollout status deploy/argocd-server
          EOF
        image: "{{ .Values.job.image.repository }}:{{ .Values.job.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.job.image.pullPolicy }}
        name: kubectl
        securityContext:
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources:
          limits:
            cpu: 100m
            memory: 64Mi
          requests:
            cpu: 1m
            memory: 1Mi
      restartPolicy: Never
      restartPolicy: Never
      serviceAccountName: {{ include "kube-components-stack.serviceAccountName" . }}-hooks
{{- if .Values.apps.certificates.enabled }}
# issues:
# - Unable to delete application with ingresses and active acme challenges: https://github.com/argoproj/argo-cd/issues/6873
# - deleting an application that uses a certificate generated by cert-manager can lead to being stucked: https://github.com/argoproj/argo-cd/issues/8278
---
apiVersion: batch/v1
kind: Job
metadata:
  name: scale-down-deploy-cert-manager
  labels:
    {{- include "kube-components-stack.labels" . | nindent 4 }}
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "1"
spec:
  backoffLimit: 4
  template:
    spec:
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      containers:
      - command:
        - /bin/sh
        - -c
        - |
          /bin/bash <<'EOF'
            set +e
            kubectl -n {{ .Values.apps.certificates.namespace }} scale deploy cert-manager --replicas=0
            sleep 1
            kubectl -n {{ .Values.apps.certificates.namespace }} scale deploy cert-manager --replicas=0
          EOF
        image: "{{ .Values.job.image.repository }}:{{ .Values.job.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.job.image.pullPolicy }}
        name: kubectl
        securityContext:
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources:
          limits:
            cpu: 100m
            memory: 64Mi
          requests:
            cpu: 1m
            memory: 1Mi
      restartPolicy: Never
      restartPolicy: Never
      serviceAccountName: {{ include "kube-components-stack.serviceAccountName" . }}-hooks
{{- end }}
{{- if and .Values.apps.monitoring.enabled .Values.apps.notifications.enabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: generate-grafana-api-key-argocd-notifications
  labels:
    {{- include "kube-components-stack.labels" . | nindent 4 }}
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
    helm.sh/hook-weight: "1"
spec:
  backoffLimit: 4
  template:
    spec:
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      containers:
      - command:
        - /bin/sh
        - -c
        - |
          /bin/bash <<'EOF'
            set -euo pipefail
            set -x

            namespace={{ .Values.apps.monitoring.namespace }}

            object=kube-prometheus-stack-grafana
            cmd="kubectl -n $namespace get deploy -o=jsonpath='{.items[?(@.metadata.name==\"'$object'\")].metadata.name}'"

            echo "wait deploy $object creation ..."
            check=$(eval $cmd)
            until [[ -n "$check" ]] ; do sleep $(shuf -i 5-10 -n 1) && check=$(eval $cmd) ; done

            kubectl -n $namespace rollout status deploy/$object

            key=grafana-api-key-argocd-notifications
            id=$(curl -u admin:admin -X GET -H "Content-Type: application/json" http://kube-prometheus-stack-grafana.monitoring.svc/api/auth/keys | jq --arg key $key '.[] | select(.name == $key) | .id')
            if [[ -z $id ]]; then
              value=$(curl -u admin:admin -X POST -H "Content-Type: application/json" -d '{"name":"'$key'", "role": "Editor"}' http://kube-prometheus-stack-grafana.monitoring.svc/api/auth/keys | jq -r '.key')
              namespace={{ .Release.Namespace }}
              object=argocd-notifications-secret
              cmd="kubectl -n $namespace get secret -o=jsonpath='{.items[?(@.metadata.name==\"'$object'\")].metadata.name}'"
              check=$(eval $cmd)
              if [[ -n "$check" ]]; then
                kubectl -n $namespace create secret generic $object --from-literal=$key=$value
              else
                kubectl -n $namespace patch secret $object --type='json' -p='[{"op" : "replace" ,"path" : "/data/'$key'" ,"value" : "'$(echo -n $value|base64 -w0)'"}]'
              fi
            fi
          EOF
        image: "{{ .Values.job.image.repository }}:{{ .Values.job.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.job.image.pullPolicy }}
        name: kubectl
        securityContext:
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources:
          limits:
            cpu: 100m
            memory: 64Mi
          requests:
            cpu: 1m
            memory: 1Mi
      restartPolicy: Never
      serviceAccountName: {{ include "kube-components-stack.serviceAccountName" . }}-hooks
{{- end }}
{{- if .Values.apps.mutating.enabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: namespace-labelling
  labels:
    {{- include "kube-components-stack.labels" . | nindent 4 }}
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 4
  template:
    spec:
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      containers:
      - name: kubectl
        command:
        - /bin/sh
        - -c
        - |
          /bin/bash <<'EOF'
            set -euo pipefail
            {{- range .Values.apps.mutating.protectedNamespaces }}
            kubectl get namespaces | grep -q {{ . }} && kubectl label namespace {{ . }} admission.kubemod.io/ignore=true --overwrite || true
            {{- end }}
          EOF
        image: "{{ .Values.job.image.repository }}:{{ .Values.job.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.job.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources:
          limits:
            cpu: 100m
            memory: 64Mi
          requests:
            cpu: 1m
            memory: 1Mi
      restartPolicy: Never
      serviceAccountName: {{ include "kube-components-stack.serviceAccountName" . }}-hooks
---
apiVersion: batch/v1
kind: Job
metadata:
  name: rollout-in-order-to-apply-mutation
  labels:
    {{- include "kube-components-stack.labels" . | nindent 4 }}
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
spec:
  backoffLimit: 4
  template:
    spec:
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      containers:
      - name: kubectl
        env:
        - name: APP
          value: "{{ .Values.apps.mutating.charts.kubemod.metadata.name }}"
        command:
        - /bin/sh
        - -c
        - |
          /bin/bash <<'EOF'
            set -euo pipefail
            echo "wait app $APP start ..."
            check=$(kubectl get -n {{ .Release.Namespace }} app $APP|sed -rn '/Synced\s+Healthy/p')
            until [[ -n "$check" ]] ; do sleep $(shuf -i 5-10 -n 1) && check=$(kubectl get -n {{ .Release.Namespace }} app $APP|sed -rn '/Synced\s+Healthy/p') ; done

            for n in $(kubectl get ns -l \!admission.kubemod.io/ignore --output 'jsonpath={.items[*].metadata.name}'); do \
              for d in $(kubectl get deploy -n $n --output 'jsonpath={.items[*].metadata.name}'); do \
                kubectl rollout restart deployment $d -n $n ; \
              done; \
              for s in $(kubectl get statefulsets -n $n --output 'jsonpath={.items[*].metadata.name}'); do \
                kubectl rollout restart statefulsets $s -n $n ; \
              done; \
              for d in $(kubectl get daemonset -n $n --output 'jsonpath={.items[*].metadata.name}'); do \
                kubectl rollout restart daemonset $d -n $n ; \
              done; \
            done
          EOF
        image: "{{ .Values.job.image.repository }}:{{ .Values.job.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.job.image.pullPolicy }}
        securityContext:
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources:
          limits:
            cpu: 100m
            memory: 64Mi
          requests:
            cpu: 1m
            memory: 1Mi
      restartPolicy: Never
      serviceAccountName: {{ include "kube-components-stack.serviceAccountName" . }}-hooks
{{- end }}
{{- end }}